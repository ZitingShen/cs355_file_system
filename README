Project: File System
Author: Linyi Chen & Ziting Shen

Compile:
make
(make format)
(make tests)

Execute:
./main
(./format <disk name> [-s size])
(./tests)


Disk Format:
************************
boot block
************************
superblock
************************
inode region
************************
data region
(including free blocks)
************************
reserved region to
store free block indices
************************
swap region
************************


Testing:
A list of thorough unit tests is included in tests.c. If all the assertion pass, then the library should work in all situations.


Limitations:
1. Format will set the initial data_offset to 1% of the disk image size to leave some space for the inode region to grow. If the inode region grows larger than the given size, an error will be returned.

2. The disk can have at most 4294967295 files, and each file has at most 12 characters name.

3. Valgrind reported some memory off-by-one errors when handling the filenames,
but I checked and everything seemed to be fine. I tried to fix them, but more errors poped up, so I just gave up.

4. Valgrind also reported errors when writing into uninitialized malloc'd blocks. The problem is that the blocks are already bzeroed, and it is the system call write() that writes uninitialized bytes into it. I don't think there is a good way to fix this other than significantly change the library design.

5. If redirection out is needed, the '>' or '>>' needs to be the second last token of the arguments. A space is needed before and after the '>' and '>>'. Redirection in other format will not be recognized by the shell.

6. When the shell is started, if there is no disk named "DISK", the shell will format one for you. This is different from the spec's requirement.

7. Only one disk can be mounted now by the shell automatically. The library does not implement mounting multiple disks or mounting at any arbitrary location.

8. chmod only supports absolute mode. The mode are listed as following:
#define PERMISSION_R		4
#define	PERMISSION_W		2
#define PERMISSION_X		1

9. For redirection, one temporary file names 'temp' will be generated to redirect the file into our formatted disk.


List of Files:
	shell_files:
		1)The following are the same as our previous shell design:
		evaluate.cpp, evaluate.h, handle_signal.cpp, handle_signal.h, joblist.cpp, joblist.h, parse.cpp, parse.h
		main.cpp
		2)We add two more files to shell:
		fscalls.h and fscalls.cpp. These two contain the new built-in functions we added to our shell.
	file_system_files:
		1) fs.c and fs.h: these two include file_system calls started with "f_"
		2) util.h: contains struct of superblock and inode
		3) tests.c: conatins unit tests of our library calls. Type "make tests", then "./tests", if get to the last printf in test.c, then all tests passed!
		3) fs_debug.h: contains print functions that are used for debugging



(a) design of your file system (enough so that I can understand what you are actually doing) 

The file system is basically following the GNU standard. All the file operations return file descriptors.

(b) whether your final implementation changed from your design document. If so, why.

design of our file system is mostly the same as our design doc. Following are some detailed specification that we didn't mention in our design doc.

1) For relative/absolute path, we let the library function calls to do the translation
2) For "more", type "q" or "ctrl+d" will quit, everything else will for to display one more row of file content.


(c) a list of whatâ€™s working, partially working and not working (d) how you tested.

Things that didn't work during demo but now works:
1) cat: it supports ">" and ">>" redirection, either from a file to a file, from stdin to a file "cat > [file_name]", or simply "cat [file_name]" that output file contect on screen.
2) more: it shows content of a file one screen full at a time. If type "q" or "ctrl + d", will quit displaying content. If type anything else, will show on the screen one extra row at a time.
3) ls: Implemented -F and -l flags
4) chmod: fully implemented
5) log in with user name and pass word: (supports root, default and superuser)
	ROOT_USERNAME     "root"
	ROOT_PASSWORD     "rootpwd"
	DEFAULT_USERNAME  "default"
	DEFAULT_PASSWORD  "defaultpwd"
	USER_SUPER        "/usr_super"
	USER_DEFAULT      "/usr_default"
6) all other functionalities not specify in the below list of things that does not work

List of things that does not work
1) only supports redirection with cat
2) cat does not support "<"
